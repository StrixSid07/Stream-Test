<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Live Video Streaming</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body
    class="bg-gray-100 text-gray-800 min-h-screen flex flex-col items-center justify-center p-6"
  >
    <div
      class="w-full max-w-xl bg-white rounded-2xl shadow-lg p-8 space-y-6 transition-all duration-300"
    >
      <h2 class="text-2xl font-semibold text-center text-blue-700">
        Join Live Video Streaming
      </h2>

      <div class="flex flex-col sm:flex-row gap-4 items-center justify-between">
        <input
          id="roomId"
          type="text"
          placeholder="Enter Room ID"
          class="w-full sm:flex-1 px-4 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all"
        />
        <button
          onclick="joinRoom()"
          class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-md shadow transition-all"
        >
          Join Room
        </button>
      </div>

      <div
        class="relative w-full aspect-video bg-gray-200 rounded-md overflow-hidden shadow-inner"
      >
        <img
          id="liveVideo"
          alt="Live Stream"
          class="w-full h-full object-cover transition-opacity duration-300"
        />
        <div
          id="noStreamOverlay"
          class="absolute inset-0 flex items-center justify-center text-gray-500 text-lg"
        >
          Waiting for host...
        </div>
      </div>
    </div>

    <script>
      const socket = io();

      function joinRoom() {
        const roomId = document.getElementById("roomId").value.trim();
        if (!roomId) return alert("Please enter a Room ID");
        socket.emit("join-room", roomId);
      }

      socket.on("host-not-connected", (data) => {
        alert(data.message);
        document.getElementById("liveVideo").src = "";
        document.getElementById("noStreamOverlay").classList.remove("hidden");
      });

      socket.on("joined-room", (data) => {
        alert(data.message);
      });

      socket.on("video-frame", (data) => {
        const blob = new Blob([data.frameData], { type: "image/jpeg" });
        const url = URL.createObjectURL(blob);
        const videoElement = document.getElementById("liveVideo");
        videoElement.src = url;

        // Hide overlay when video starts
        document.getElementById("noStreamOverlay").classList.add("hidden");
      });

      socket.on("host-disconnected", (data) => {
        alert(data.message);
        document.getElementById("liveVideo").src = "";
        document.getElementById("noStreamOverlay").classList.remove("hidden");
      });
    </script>
  </body>
</html>
